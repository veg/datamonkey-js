/*************************************************************************************/

function PostOrderAVL2StringDL (theAVL, doLengths)
{
	return PostOrderAVL2StringAnnotate (theAVL, doLengths, "");
}
function PostOrderAVL2StringAnnotate (theAVL, doLengths,label)
{
	return PostOrderAVL2StringAnnotateAux (theAVL, doLengths, label, "[]");
}

/*************************************************************************************/

function PostOrderAVL2StringAnnotateAux (theAVL, doLengths, label, chars)
{
	_ost = "";
	_ost * 256;
	
	lastLevel = 0;
	treeSize  = Abs(theAVL);
	treeInfo  = theAVL[0];
	rootIndex = theAVL["Root"];
	
	for (nodeIndex = 1; nodeIndex < treeSize; nodeIndex = nodeIndex + 1)
	{
		if (nodeIndex != rootIndex)
		{
			nodeInfo = theAVL[nodeIndex];
			myDepth = nodeInfo["Depth"];
			if (lastDepth < myDepth)
			{
				if (lastDepth)
				{
					_ost * ",";
				}
				for (pidx = lastDepth; pidx < myDepth; pidx = pidx + 1)
				{
					_ost * "(";
				}
			}
			else
			{
				if (lastDepth > myDepth)
				{
					for (pidx = myDepth; pidx < lastDepth; pidx = pidx + 1)
					{
						_ost * ")";
					}				
				}
				else
				{
					_ost * ",";
				}
			}
			
			_ost * nodeInfo["Name"];
			
			if (Abs (label))
			{
				if (Abs(nodeInfo[label]))
				{
					_ost * (chars[0] + nodeInfo[label] + chars[1]);
				}
			}

			if (doLengths)
			{
				if (nodeIndex < treeSize - 1)
				{
					_ost * ":";
					_ost * (""+nodeInfo ["Length"]); 
				}
			}
			lastDepth = myDepth;
		}
	}
	
	_ost * 0;
	return _ost;
}

function PostOrderAVL2String (theAVL)
{
	_ost = "";
	_ost * 256;
	
	lastLevel = 0;
	treeSize  = Abs(theAVL);
	treeInfo  = theAVL[0];
	rootIndex = theAVL["Root"];
	
	for (nodeIndex = 1; nodeIndex < treeSize; nodeIndex = nodeIndex + 1)
	{
		if (nodeIndex != rootIndex && (theAVL[nodeIndex])["Parent"] >= 0)
		{
			nodeInfo = theAVL[nodeIndex];
			myDepth = nodeInfo["Depth"];
			if (lastDepth < myDepth)
			{
				if (lastDepth)
				{
					_ost * ",";
				}
				for (pidx = lastDepth; pidx < myDepth; pidx = pidx + 1)
				{
					_ost * "(";
				}
			}
			else
			{
				if (lastDepth > myDepth)
				{
					for (pidx = myDepth; pidx < lastDepth; pidx = pidx + 1)
					{
						_ost * ")";
					}				
				}
				else
				{
					_ost * ",";
				}
			}
			if (Abs(nodeInfo["Children"])==0)
			{
				_ost * nodeInfo["Name"];
			}
			if (nodeInfo["Length"] >= 0)
			{
				_ost * (":"+nodeInfo["Length"]);
			}
			lastDepth = myDepth;
		}
	}
	
	_ost * 0;
	return _ost;
}

/*************************************************************************************/

function PostOrderAVL2StringDistances (theAVL, distAVL)
{
	_ost = "";
	_ost * 256;
	
	lastLevel = 0;
	treeSize  = Abs(theAVL);
	treeInfo  = theAVL[0];
	
	for (nodeIndex = 1; nodeIndex < treeSize; nodeIndex = nodeIndex + 1)
	{
		if (nodeIndex != rootIndex)
		{
			nodeInfo = theAVL[nodeIndex];
			myDepth = nodeInfo["Depth"];
			myName 	= nodeInfo["Name"];
			
			if (lastDepth < myDepth)
			{
				if (lastDepth)
				{
					_ost * ",";
				}
				for (pidx = lastDepth; pidx < myDepth; pidx = pidx + 1)
				{
					_ost * "(";
				}
			}
			else
			{
				if (lastDepth > myDepth)
				{
					for (pidx = myDepth; pidx < lastDepth; pidx = pidx + 1)
					{
						_ost * ")";
					}				
				}
				else
				{
					_ost * ",";
				}
			}
			if (Abs(nodeInfo["Children"])==0)
			{
				_ost * myName;
			}
			if (nodeIndex < treeSize - 1)
			{
				_ost * ":";
				_ost * (""+distAVL [myName]); 
			}
			lastDepth = myDepth;
		}
	}
	
	_ost * 0;
	return _ost;
}

/*************************************************************************************/

function KillInternalZeroBranchLengths (treeAVL)
{
	treeSize   = Abs(treeAVL);
	newTreeAVL = {};
	oldIndexMap= {treeSize,1};
	index2	   = {treeSize,1};
	newDAVL	   = {};
	newTreeAVL [0] = treeAVL[0];
	allDeleted = 0;
	for (nodeIndex = 1; nodeIndex < treeSize; nodeIndex = nodeIndex + 1)
	{
		newDAVL [(treeAVL[nodeIndex])["Name"]] = (treeAVL[nodeIndex])["Length"];
		
		if (Abs((treeAVL[nodeIndex])["Children"]) && Abs((treeAVL[nodeIndex])["Length"]) < 1e-10 && (treeAVL[nodeIndex])["Parent"]) 
			/* zero internal branch */
		{
			oldIndexMap[nodeIndex] = -(treeAVL[nodeIndex])["Parent"];
			allDeleted			 = allDeleted + 1;
		}
		else
		{
			newTreeAVL [nodeIndex-allDeleted] = treeAVL[nodeIndex];
			oldIndexMap[nodeIndex]   			= nodeIndex-allDeleted;
			index2 [nodeIndex-allDeleted]		= nodeIndex;
		}
	}
	
	if (allDeleted)
	{
		markedIndices = {};
		for (nodeIndex = treeSize-1; nodeIndex>0; nodeIndex = nodeIndex - 1)
		{
			if (oldIndexMap [nodeIndex]<0)
			{
				markedIndices[nodeIndex] = 1;
				oldIndexMap[nodeIndex] = oldIndexMap[-oldIndexMap[nodeIndex]]; 
			}
		}
		treeSize = Abs (newTreeAVL);
		for (nodeIndex = 1; nodeIndex<treeSize; nodeIndex = nodeIndex + 1)
		{
			meParent = (newTreeAVL[nodeIndex])["Parent"];
			_cc		 = Abs((newTreeAVL[nodeIndex])["Children"]);
			if (_cc > 0)
			{
				newChildrenMap = {};
				for (_cci = 0; _cci < _cc; _cci = _cci+1)
				/* map children to new indices */
				{				
					_cn = ((newTreeAVL[nodeIndex])["Children"])[_cci];
					if (markedIndices[_cn] == 0)
					{
						newChildrenMap[Abs(newChildrenMap)] = oldIndexMap[_cn];
					}
				}
				((newTreeAVL[nodeIndex])["Children"]) = newChildrenMap;
			}
					
			if (meParent > 0)
			{
				meParentOI = meParent;
				meParent = oldIndexMap[meParent];
				(newTreeAVL[nodeIndex])["Parent"] = meParent;
				if (markedIndices[meParentOI])
				{
					/*
					fprintf (stdout, "Insert ", (newTreeAVL[nodeIndex])["Name"], " as a child of ", (newTreeAVL[meParent])["Name"], " index ", index2[nodeIndex], "(", oldIndexMap[index2[nodeIndex]], ",", nodeIndex,")\n");
					*/
					((newTreeAVL[meParent])["Children"])[Abs((newTreeAVL[meParent])["Children"])] = index2[nodeIndex];
				}
			}

		}
		
		
		for (nodeIndex = treeSize-1; nodeIndex>0; nodeIndex = nodeIndex - 1)
		{
			_cc		 = Abs((newTreeAVL[nodeIndex])["Children"]);
			if (_cc > 0)
			{
				_cd = (newTreeAVL[nodeIndex])["Depth"] + 1;
				for (_cci = 0; _cci < _cc; _cci = _cci+1)
				{				
					_cn =  ((newTreeAVL[nodeIndex])["Children"])[_cci];
					/*fprintf (stdout, (newTreeAVL[_cn])["Name"], ":", (newTreeAVL[_cn])["Depth"], "=>", _cd, "\n");*/
					(newTreeAVL[_cn])["Depth"] = _cd;
				}
			}
		}

		(newTreeAVL[0])["Root"] = treeSize-1;
	}
	
	return PostOrderAVL2StringDistances (newTreeAVL, newDAVL);
}


/*************************************************************************************/

function TreeAVL2String (treeAVL)
{
	rootNode = treeAVL[0];
	rootNode = rootNode["Root"];
	return subtreeAVLStr (rootNode,0,0);
}


/*************************************************************************************/

function subtreeAVLStr (nodeIndex,k,treeString)
{
	nodeInfo = treeAVL[nodeIndex];
	k = Abs(nodeInfo["Children"])-1;
	if (k>=0)
	{
		while (k>=0)
		{
			nodeInfo = treeAVL[nodeIndex];
			cNodes = nodeInfo["Children"];
			cNodes = cNodes[k];
			if (k < Abs(nodeInfo["Children"])-1)
			{
				ExecuteCommands("treeString=subtreeAVLStr (cNodes,k,treeString)+\",\"+treeString;");
			}
			else
			{
				ExecuteCommands("treeString=subtreeAVLStr (cNodes,k,treeString)+\")\";");
			}
			k=k-1;
		}
		return "("+treeString;
	}
	else
	{
		callLevel = callLevel - 1;
		return nodeInfo["Name"];
	}
}

/*************************************************************************************/

function InsertANode (theAVL&,insertAt,newNodeName)
{
	nodeInfo = theAVL[insertAt];
	if (Abs(nodeInfo))
	{
		nparent = nodeInfo["Parent"];
		if (nparent > 0)
		{
			lastIndex = Abs(theAVL);
			myDepth = nodeInfo["Depth"];
			newParentNode = {};
			newParentNode ["Name"] = "Node"+lastIndex;
			newParentNode ["Parent"] = nparent;
			newParentNode ["Depth"] = myDepth;
			
			newChildNode = {};
			newChildNode ["Name"] = newNodeName;
			newChildNode ["Parent"] = lastIndex;
			newChildNode ["Depth"] = myDepth + 1;
			
			pChildren = {};
			pChildren [0] = insertAt;
			pChildren [1] = lastIndex+1;
			newParentNode ["Children"] = pChildren;
			
			theAVL[lastIndex] = newParentNode;
			theAVL[lastIndex+1] = newChildNode;

			/* update the parent*/

			nodeInfo ["Parent"] = lastIndex;
			theAVL[insertAt] = nodeInfo;
			
			/* update the list of children at the parent node*/
			
			parentInfo = theAVL[nparent];
			parentChildren = parentInfo["Children"];
			
			for (nic = Abs(parentChildren)-1; nic >= 0; nic = nic-1)
			{
				if (parentChildren[nic] == insertAt)
				{
					break;
				}
			}

			parentChildren[nic] = lastIndex;
			parentInfo["Children"] = parentChildren;
			theAVL[nparent] = parentInfo;
			
			/* now update the depths at new NodeName and all of its children */
			
			nodeCache    = {};
			nodeCache[0] = insertAt;
			cacheIndex   = 0;
			
			while (cacheIndex <= Abs(nodeCache))
			{
				nparent 			= nodeCache[cacheIndex];
				nodeInfo 			= theAVL[nparent];
				nodeInfo["Depth"] 	= nodeInfo["Depth"] + 1;
				theAVL[nparent] 	= nodeInfo;
				nodeChildren 		= nodeInfo["Children"];
				for (nic = Abs(nodeChildren)-1; nic >=0; nic = nic-1)
				{
					nodeCache [Abs(nodeCache)] = nodeChildren[nic];
				}
				cacheIndex = cacheIndex + 1;
			}
			
			nodeCache = 0;
		}
	}
	return 0;
}

/*************************************************************************************/

function	ModifyDepth (nIndex, modAmount)
{
	nodeInfo = theAVL[nIndex];
	nodeInfo ["Depth"] = nodeInfo ["Depth"] + modAmount;
	theAVL[nIndex] = nodeInfo;

}

/*************************************************************************************/

function	echoAVL (anAVL)
{
	for (k=1; k<Abs(anAVL); k=k+1)
	{
		nodeInfo 			= anAVL[k];
		myChildren			= nodeInfo["Children"];
		if (Abs(myChildren))
		{
			fprintf (stdout, "Index ", k, ":", nodeInfo["Name"], " : parent = ", nodeInfo["Parent"], " children:");
			for (k2 = 0; k2 < Abs(myChildren); k2=k2+1)
			{
				fprintf (stdout,"\t", myChildren[k2]);
			}
			fprintf (stdout, " depth: ", nodeInfo["Depth"], "\n");
		
		}
		else
		{
			fprintf (stdout, "Index ", k, ":", nodeInfo["Name"], " : parent = ", nodeInfo["Parent"], " children: none, depth: ", nodeInfo["Depth"], "\n");
		}
	}
	return 0;
}

/*************************************************************************************/





