ExecuteAFile("../Shared/HyPhyGlobals.ibf");
ExecuteAFile("../Shared/GrabBag.bf");
ExecuteAFile("../Shared/ReadDelimitedFiles.bf");

BASE_DATA_FILE_PATH = _in_FilePath;
filePathInfo		= splitFilePath (BASE_DATA_FILE_PATH);
BASE_HTML_PATH		= BASE_OUTPUT_PATH    + filePathInfo["FILENAME"] + "." + filePathInfo["EXTENSION"];
SPLITS_FILE_PATH	= BASE_DATA_FILE_PATH + ".splits";
fileSpec		= filePathInfo["FILENAME"] + "." + filePathInfo["EXTENSION"];

fprintf(stdout,_getTreeLink (fileSpec,_treeMode,0));

GetURL				(analysisSpecRaw, _getTreeLink (fileSpec,_treeMode,0));
if (Abs (analysisSpecRaw) == 0)
{
     GetURL                          (analysisSpecRaw, _getTreeLink (fileSpec,0,0));
     _treeMode 						= 0;
}

jobIDDIV	        = _makeJobIDHTML(fileSpec);

sscanf		       (analysisSpecRaw,"Lines",analysisSpec);

fileCount 			= 0+analysisSpec[0];

mySplits 			= {};
myTrees  			= {};

for (_k2 = 0; _k2 < fileCount; _k2 = _k2 + 1)
{
        mySplits[_k2]  = analysisSpec[1+2*_k2];
        if (genCodeID >= 0)
        {
                _pos = splitOnRegExp(mySplits[_k2],"\\-");
                _r1 = (0+_pos[0])%3;
                if (_r1 == 2)
                {
                        _r1 = (0+_pos[0])$3*3+3;
                }
                else
                {
                        _r1 = (0+_pos[0])$3*3;
                }
                _r2 = (0+_pos[1])%3;
                if (_r2 >=1)
                {
                        _r2 = (0+_pos[1])$3*3+2;
                }
                else
                {
                        _r2 = (0+_pos[1])$3*3-1;
                }
                mySplits[_k2]                                                    = Format(_r1,10,0)+"-"+Format(_r2,10,0);
        }
        myTrees [_k2]  = analysisSpec[2+2*_k2];
}




treeStrings			= {};
codonsByPartition    = {};

DataSet 	ds_0 = ReadDataFile (BASE_DATA_FILE_PATH);

/*------------------------------------------------------------------------*/

if (_in_GeneticCodeTable >= 0)
{
	for (fileID = 1; fileID <= fileCount; fileID = fileID + 1)
	{
		DataSetFilter filteredData = CreateFilter (ds_0,3,mySplits[fileID-1],,GeneticCodeExclusions);
		Export 		  (baseFPath,filteredData);
		
		ExecuteCommands ( 
		"DataSet				ds_" +fileID + " = ReadFromString (baseFPath);"+
		"DataSetFilter filteredData_" + fileID + " = CreateFilter (ds_"+fileID +",3,\"\",\"\",GeneticCodeExclusions);" + 
		"DataSetFilter nucData_" + fileID + " = CreateFilter (ds_"+fileID +",1);");
		treeString = myTrees[fileID-1];
		ExecuteCommands ("treeString_" + fileID + " = treeString;totalCharCount=totalCharCount+filteredData_"+fileID+".sites*filteredData_"+fileID+".species;totalCodonCount=totalCodonCount+filteredData_"+fileID+".sites;totalUniqueSites=totalUniqueSites+filteredData_"+fileID+".unique_sites;");
		treeStrings[fileID] = treeString;
	}

	positionFrequencies       = {4,3};
	overallFrequencies 		  = {4,1};
	for (fileID = 1; fileID <= fileCount; fileID = fileID + 1)
	{
		ExecuteCommands 	  ("HarvestFrequencies (tp, filteredData_"+fileID+",3,1,1);HarvestFrequencies (ts, filteredData_"+fileID+",1,1,1);cfs = filteredData_"+fileID+".sites;");
		positionFrequencies 		= positionFrequencies 		 + tp*(cfs/totalCodonCount);
		overallFrequencies  		= overallFrequencies + ts*(cfs/totalCodonCount);
		codonsByPartition			[fileID] =  cfs;
	}
}
else
{
	for (fileID = 1; fileID <= fileCount; fileID = fileID + 1)
	{
		DataSetFilter filteredData = CreateFilter (ds_0,1,mySplits[fileID-1]);
		Export 		  (baseFPath,filteredData);
		
		ExecuteCommands ( 
		"DataSet				ds_" +fileID + " = ReadFromString (baseFPath);"+
		"DataSetFilter nucData_" + fileID + " = CreateFilter (ds_"+fileID +",1);");
		treeString = myTrees[fileID-1];
		ExecuteCommands ("treeString_" + fileID + " = treeString;totalCharCount=totalCharCount+nucData_"+fileID+".sites*nucData_"+fileID+".species;totalNucCount=totalNucCount+nucData_"+fileID+".sites;totalUniqueSites=totalUniqueSites+nucData_"+fileID+".unique_sites;");
		treeStrings[fileID] = treeString;
	}

	overallFrequencies 		  = {4*(_in_GeneticCodeTable==(-1)) + 20*(_in_GeneticCodeTable==(-2)) ,1};
	for (fileID = 1; fileID <= fileCount; fileID = fileID + 1)
	{
		ExecuteCommands 	  		("HarvestFrequencies (tp, nucData_"+fileID+",3,1,1);HarvestFrequencies (ts, nucData_"+fileID+",1,1,1);cfs = nucData_"+fileID+".sites;");
		overallFrequencies  		= overallFrequencies + ts*(cfs/totalNucCount);
		codonsByPartition			[fileID] =  cfs;
	}
}

/*------------------------------------------------------------------------*/

function constructLF (lf_name, filter_pref, tree_pref, part_count)
{
	lfDefCommand = "";
	lfDefCommand * 128;
	lfDefCommand * ("LikelihoodFunction  " + lf_name + " = (" + filter_pref + "_1," + tree_pref + "_1");
	
	for (_partID = 2; _partID <= part_count; _partID = _partID + 1)
	{
		lfDefCommand * ("," + filter_pref + "_" + _partID + "," + tree_pref + "_" +  _partID);
	}
	
	lfDefCommand * ");";
	lfDefCommand * 0;
	return lfDefCommand;
}

/*------------------------------------------------------------------------*/

function populateTrees (tree_pref, part_count)
{
	lfDefCommand = "";
	lfDefCommand * 128;
	
	for (_partID = 1; _partID <= part_count; _partID = _partID + 1)
	{
		lfDefCommand * ("Tree " + tree_pref + "_" + _partID + " = " + treeStrings[_partID] + ";\n");
	}
	
	lfDefCommand * 0;
	ExecuteCommands (lfDefCommand);
	return 0;
}

/*------------------------------------------------------------------------*/

