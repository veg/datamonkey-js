<%- include("header.ejs") %>

<div class="row">
  <div class="col-md-12">
    <div class="alert alert-success">
      <h4><i class="fa fa-check-circle"></i> difFUBAR Analysis Complete</h4>
      <p>Your differential FUBAR analysis has completed successfully. Download the results and visualizations below.</p>
    </div>
  </div>
</div>

<div class="row">
  <div class="col-md-6">
    <div class="card">
      <div class="card-header">
        <h5><i class="fa fa-download"></i> Results Data</h5>
      </div>
      <div class="card-body">
        <p>Download the analysis results in JSON format:</p>
        <div class="mb-3">
          <a href="/difFubar/<%= job._id %>/results" 
             class="btn btn-primary" 
             download="difFubar_<%= job._id %>_results.json">
            <i class="fa fa-file-code"></i> Download JSON Results
          </a>
        </div>
        
        <p>Download the original sequence alignment:</p>
        <div class="mb-3">
          <a href="/difFubar/<%= job._id %>/fasta" 
             class="btn btn-secondary"
             target="_blank">
            <i class="fa fa-file-text"></i> View FASTA
          </a>
        </div>

        <p>View analysis log:</p>
        <div class="mb-3">
          <a href="/difFubar/<%= job._id %>/log.txt" 
             class="btn btn-info"
             target="_blank">
            <i class="fa fa-file-alt"></i> View Log
          </a>
        </div>
      </div>
    </div>
  </div>

  <div class="col-md-6">
    <div class="card">
      <div class="card-header">
        <h5><i class="fa fa-chart-line"></i> Visualizations</h5>
      </div>
      <div class="card-body">
        <p>Interactive visualizations and download options:</p>
        
        <!-- Visualization tabs -->
        <ul class="nav nav-tabs" id="vizTabs" role="tablist">
          <li class="nav-item">
            <a class="nav-link active" id="overview-tab" data-toggle="tab" href="#overview" role="tab">
              Overview
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" id="posteriors-tab" data-toggle="tab" href="#posteriors" role="tab">
              Posteriors
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" id="detections-tab" data-toggle="tab" href="#detections" role="tab">
              Detections
            </a>
          </li>
        </ul>
        
        <div class="tab-content mt-3" id="vizTabContent">
          <!-- Overview Plot Tab -->
          <div class="tab-pane fade show active" id="overview" role="tabpanel">
            <div class="text-center mb-3">
              <div id="overview-plot-container" style="max-height: 500px; overflow: auto;">
                <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
                  <div class="spinner-border" role="status">
                    <span class="sr-only">Loading...</span>
                  </div>
                </div>
              </div>
            </div>
            <div class="text-center">
              <small class="text-muted">Differential selection across codon sites</small>
            </div>
          </div>
          
          <!-- Posteriors Tab -->
          <div class="tab-pane fade" id="posteriors" role="tabpanel">
            <div class="text-center mb-3">
              <div id="posteriors-plot-container" style="max-height: 500px; overflow: auto;">
                <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
                  <div class="spinner-border" role="status">
                    <span class="sr-only">Loading...</span>
                  </div>
                </div>
              </div>
            </div>
            <div class="text-center">
              <small class="text-muted">Parameter distributions for α and ω</small>
            </div>
          </div>
          
          <!-- Detections Tab -->
          <div class="tab-pane fade" id="detections" role="tabpanel">
            <div class="text-center mb-3">
              <div id="detections-plot-container" style="max-height: 500px; overflow: auto;">
                <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
                  <div class="spinner-border" role="status">
                    <span class="sr-only">Loading...</span>
                  </div>
                </div>
              </div>
            </div>
            <div class="text-center">
              <small class="text-muted">Sites with differential selection</small>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<div class="row mt-4">
  <div class="col-md-12">
    <div class="card">
      <div class="card-header">
        <h5><i class="fa fa-info-circle"></i> Analysis Summary</h5>
      </div>
      <div class="card-body">
        <div class="row">
          <div class="col-md-4">
            <strong>Job ID:</strong><br>
            <code><%= job._id %></code>
          </div>
          <div class="col-md-4">
            <strong>Analysis Type:</strong><br>
            Differential FUBAR
          </div>
          <div class="col-md-4">
            <strong>Status:</strong><br>
            <span class="badge badge-success">Completed</span>
          </div>
        </div>
        
        <hr>
        
        <div class="row">
          <div class="col-md-3">
            <strong>Sequences:</strong><br>
            <%= job.msa[0].sequences %>
          </div>
          <div class="col-md-3">
            <strong>Sites:</strong><br>
            <%= job.msa[0].sites %>
          </div>
          <div class="col-md-3">
            <strong>MCMC Iterations:</strong><br>
            <%= job.mcmc_iterations || 'Default' %>
          </div>
          <div class="col-md-3">
            <strong>Grid Points:</strong><br>
            20 (Default)
          </div>
        </div>

        <% if (job.branch_sets && job.branch_sets.length > 0) { %>
        <hr>
        <div class="row">
          <div class="col-md-12">
            <strong>Branch Groups:</strong><br>
            <% job.branch_sets.forEach(function(group, index) { %>
              <span class="badge badge-primary mr-1"><%= group %></span>
            <% }); %>
          </div>
        </div>
        <% } %>
      </div>
    </div>
  </div>
</div>

<div class="row mt-4">
  <div class="col-md-12">
    <div class="alert alert-info">
      <h6><i class="fa fa-lightbulb"></i> How to Interpret Results</h6>
      <ul class="mb-0">
        <li><strong>JSON Results:</strong> Contains detailed posterior probabilities for each site</li>
        <li><strong>Overview Plot:</strong> Shows differential selection signals across all codon sites</li>
        <li><strong>Posterior Distributions:</strong> Displays parameter estimates for both branch groups</li>
        <li><strong>Detection Summary:</strong> Highlights sites with significant differential selection</li>
      </ul>
    </div>
  </div>
</div>

<style>
.card {
  margin-bottom: 1rem;
}

.btn-group .btn {
  margin-right: 0;
}

.badge {
  font-size: 0.875em;
}

.text-muted.small {
  font-size: 0.825em;
}
/* Visualization styles */
.nav-tabs .nav-link {
  color: #495057;
}

.nav-tabs .nav-link.active {
  font-weight: bold;
}

.tab-content {
  border: 1px solid #dee2e6;
  border-top: none;
  padding: 1rem;
  border-radius: 0 0 0.375rem 0.375rem;
}

.plot-container svg {
  max-width: 100%;
  height: auto;
}
</style>

<script src="https://d3js.org/d3.v3.min.js"></script>
<script>
$(document).ready(function() {
  // Keep track of loaded plots to avoid reloading
  var loadedPlots = {};
  
  // Enhanced function to load SVG plot with interactivity
  function loadPlot(plotName, containerId) {
    if (loadedPlots[plotName]) {
      return; // Already loaded
    }
    
    var container = $('#' + containerId);
    var plotUrl = '/difFubar/<%= job._id %>/plots/' + plotName + '.svg';
    
    // Show loading spinner
    container.html(
      '<div class="d-flex justify-content-center align-items-center" style="height: 200px;">' +
      '<div class="spinner-border" role="status">' +
      '<span class="sr-only">Loading...</span>' +
      '</div>' +
      '</div>'
    );
    
    // Load SVG content via AJAX
    $.get(plotUrl)
      .done(function(svgContent) {
        // Insert SVG content directly into container
        container.html(svgContent);
        var svg = container.find('svg');
        svg.addClass('plot-container');
        
        // Add interactive features to the loaded SVG
        enhanceSvgInteractivity(svg, plotName);
        
        // Add export buttons
        addExportButtons(container, plotName);
        
        loadedPlots[plotName] = true;
      })
      .fail(function() {
        // Show error message if plot fails to load
        container.html(
          '<div class="alert alert-warning" role="alert">' +
          '<i class="fa fa-exclamation-triangle"></i> ' +
          'Plot could not be loaded. You can still download the file using the buttons below.' +
          '</div>'
        );
      });
  }
  
  // Enhanced SVG interactivity
  function enhanceSvgInteractivity(svgElement, plotName) {
    var svg = d3.select(svgElement[0]);
    
    // Add zoom and pan functionality
    var zoom = d3.behavior.zoom()
      .scaleExtent([0.5, 5])
      .on("zoom", function() {
        var g = svg.select("g");
        if (g.node()) {
          g.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
        }
      });
    
    svg.call(zoom);
    
    // Add tooltip for interactive elements
    var tooltip = d3.select("body").append("div")
      .attr("class", "difFubar-tooltip")
      .style("opacity", 0)
      .style("position", "absolute")
      .style("padding", "8px")
      .style("background", "rgba(0, 0, 0, 0.8)")
      .style("color", "white")
      .style("border-radius", "4px")
      .style("font-size", "12px")
      .style("pointer-events", "none")
      .style("z-index", "1000");
    
    // Add interactions to plot elements
    svg.selectAll("circle, rect, path")
      .on("mouseover", function(d, i) {
        d3.select(this)
          .style("stroke", "#ff6b35")
          .style("stroke-width", "2px")
          .style("opacity", "0.8");
        
        // Extract data for tooltip (customize based on plot type)
        var tooltipText = getTooltipText(this, plotName, i);
        if (tooltipText) {
          tooltip.transition()
            .duration(200)
            .style("opacity", .9);
          tooltip.html(tooltipText)
            .style("left", (d3.event.pageX + 10) + "px")
            .style("top", (d3.event.pageY - 28) + "px");
        }
      })
      .on("mouseout", function(d, i) {
        d3.select(this)
          .style("stroke", null)
          .style("stroke-width", null)
          .style("opacity", null);
        
        tooltip.transition()
          .duration(500)
          .style("opacity", 0);
      });
    
    // Add double-click to reset zoom
    svg.on("dblclick.zoom", function() {
      svg.transition()
        .duration(750)
        .call(zoom.scale(1).translate([0, 0]).event);
    });
    
    // Add cursor styles
    svg.style("cursor", "grab");
    svg.on("mousedown", function() {
      svg.style("cursor", "grabbing");
    });
    svg.on("mouseup", function() {
      svg.style("cursor", "grab");
    });
  }
  
  // Generate tooltip text based on plot type and element
  function getTooltipText(element, plotName, index) {
    var el = d3.select(element);
    var tooltipContent = "";
    
    switch(plotName) {
      case 'overview':
        tooltipContent = "Site: " + (index + 1) + "<br/>Double-click to reset zoom";
        break;
      case 'posteriors':
        tooltipContent = "Parameter distribution<br/>Hover for details";
        break;
      case 'detections':
        tooltipContent = "Detection site: " + (index + 1) + "<br/>Differential selection detected";
        break;
      default:
        tooltipContent = "Interactive element<br/>Double-click to reset zoom";
    }
    
    return tooltipContent;
  }
  
  // Add export buttons to plot containers
  function addExportButtons(container, plotName) {
    var exportDiv = $('<div class="mt-2 text-center">' +
      '<div class="btn-group btn-group-sm" role="group">' +
      '<button class="btn btn-outline-secondary btn-sm export-svg-btn" data-plot="' + plotName + '">' +
      '<i class="fa fa-download"></i> Export SVG' +
      '</button>' +
      '<button class="btn btn-outline-secondary btn-sm export-png-btn" data-plot="' + plotName + '">' +
      '<i class="fa fa-download"></i> Export PNG' +
      '</button>' +
      '<button class="btn btn-outline-info btn-sm reset-zoom-btn" data-plot="' + plotName + '">' +
      '<i class="fa fa-search-minus"></i> Reset Zoom' +
      '</button>' +
      '</div>' +
      '</div>');
    
    container.append(exportDiv);
    
    // Export functionality
    exportDiv.find('.export-svg-btn').click(function() {
      exportSvg(container.find('svg')[0], plotName);
    });
    
    exportDiv.find('.export-png-btn').click(function() {
      exportPng(container.find('svg')[0], plotName);
    });
    
    exportDiv.find('.reset-zoom-btn').click(function() {
      var svg = d3.select(container.find('svg')[0]);
      svg.select('g').transition().duration(750).attr("transform", "translate(0,0)scale(1)");
    });
  }
  
  // Export SVG function
  function exportSvg(svgElement, plotName) {
    if (!svgElement) return;
    
    var serializer = new XMLSerializer();
    var svgString = serializer.serializeToString(svgElement);
    var blob = new Blob([svgString], {type: "image/svg+xml;charset=utf-8"});
    var url = URL.createObjectURL(blob);
    
    var link = document.createElement("a");
    link.href = url;
    link.download = "difFubar_<%= job._id %>_" + plotName + ".svg";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  }
  
  // Export PNG function (simplified version)
  function exportPng(svgElement, plotName) {
    if (!svgElement) return;
    
    // Use the original PNG download link as fallback
    var pngUrl = '/difFubar/<%= job._id %>/plots/' + plotName + '.png';
    var link = document.createElement("a");
    link.href = pngUrl;
    link.download = "difFubar_<%= job._id %>_" + plotName + ".png";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }
  
  // Load overview plot immediately (active tab)
  loadPlot('overview', 'overview-plot-container');
  
  // Load plots when tabs are clicked
  $('#vizTabs a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
    var target = $(e.target).attr('href'); // Get the target tab
    
    switch(target) {
      case '#overview':
        loadPlot('overview', 'overview-plot-container');
        break;
      case '#posteriors':
        loadPlot('posteriors', 'posteriors-plot-container');
        break;
      case '#detections':
        loadPlot('detections', 'detections-plot-container');
        break;
    }
  });
});
</script>